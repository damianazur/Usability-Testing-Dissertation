[{"C:\\Users\\New User\\Desktop\\Fourth Year\\Usability_Testing_FYP\\WebApp\\usabcheck\\frontend\\src\\index.js":"1","C:\\Users\\New User\\Desktop\\Fourth Year\\Usability_Testing_FYP\\WebApp\\usabcheck\\frontend\\src\\reportWebVitals.js":"2","C:\\Users\\New User\\Desktop\\Fourth Year\\Usability_Testing_FYP\\WebApp\\usabcheck\\frontend\\src\\App.js":"3","C:\\Users\\New User\\Desktop\\Fourth Year\\Usability_Testing_FYP\\WebApp\\usabcheck\\frontend\\src\\services\\auth.service.js":"4","C:\\Users\\New User\\Desktop\\Fourth Year\\Usability_Testing_FYP\\WebApp\\usabcheck\\frontend\\src\\modal\\modalTemplate.js":"5","C:\\Users\\New User\\Desktop\\Fourth Year\\Usability_Testing_FYP\\WebApp\\usabcheck\\frontend\\src\\components\\modalContainer.component.js":"6","C:\\Users\\New User\\Desktop\\Fourth Year\\Usability_Testing_FYP\\WebApp\\usabcheck\\frontend\\src\\components\\modalButton.component.js":"7","C:\\Users\\New User\\Desktop\\Fourth Year\\Usability_Testing_FYP\\WebApp\\usabcheck\\frontend\\src\\components\\testContainer.component.js":"8","C:\\Users\\New User\\Desktop\\Fourth Year\\Usability_Testing_FYP\\WebApp\\usabcheck\\frontend\\src\\forms\\deleteProjectForm.js":"9","C:\\Users\\New User\\Desktop\\Fourth Year\\Usability_Testing_FYP\\WebApp\\usabcheck\\frontend\\src\\forms\\createProjectForm.js":"10","C:\\Users\\New User\\Desktop\\Fourth Year\\Usability_Testing_FYP\\WebApp\\usabcheck\\frontend\\src\\forms\\deleteTestForm.js":"11","C:\\Users\\New User\\Desktop\\Fourth Year\\Usability_Testing_FYP\\WebApp\\usabcheck\\frontend\\src\\components\\dropdownGenerator.component.js":"12","C:\\Users\\New User\\Desktop\\Fourth Year\\Usability_Testing_FYP\\WebApp\\usabcheck\\frontend\\src\\views\\register.component.js":"13","C:\\Users\\New User\\Desktop\\Fourth Year\\Usability_Testing_FYP\\WebApp\\usabcheck\\frontend\\src\\views\\home.component.js":"14","C:\\Users\\New User\\Desktop\\Fourth Year\\Usability_Testing_FYP\\WebApp\\usabcheck\\frontend\\src\\views\\login.component.js":"15","C:\\Users\\New User\\Desktop\\Fourth Year\\Usability_Testing_FYP\\WebApp\\usabcheck\\frontend\\src\\views\\dashboard.component.js":"16","C:\\Users\\New User\\Desktop\\Fourth Year\\Usability_Testing_FYP\\WebApp\\usabcheck\\frontend\\src\\services\\server.service.js":"17","C:\\Users\\New User\\Desktop\\Fourth Year\\Usability_Testing_FYP\\WebApp\\usabcheck\\frontend\\src\\views\\createTest.component.js":"18","C:\\Users\\New User\\Desktop\\Fourth Year\\Usability_Testing_FYP\\WebApp\\usabcheck\\frontend\\src\\components\\taskCreate.component.js":"19","C:\\Users\\New User\\Desktop\\Fourth Year\\Usability_Testing_FYP\\WebApp\\usabcheck\\frontend\\src\\services\\store.js":"20","C:\\Users\\New User\\Desktop\\Fourth Year\\Usability_Testing_FYP\\WebApp\\usabcheck\\frontend\\src\\components\\dynamicList.component.js":"21","C:\\Users\\New User\\Desktop\\Fourth Year\\Usability_Testing_FYP\\WebApp\\usabcheck\\frontend\\src\\components\\textQuestionCreate.component.js":"22","C:\\Users\\New User\\Desktop\\Fourth Year\\Usability_Testing_FYP\\WebApp\\usabcheck\\frontend\\src\\components\\mutliplechoiceQuestion.component.js":"23","C:\\Users\\New User\\Desktop\\Fourth Year\\Usability_Testing_FYP\\WebApp\\usabcheck\\frontend\\src\\views\\viewTestDetails.component.js":"24","C:\\Users\\New User\\Desktop\\Fourth Year\\Usability_Testing_FYP\\WebApp\\usabcheck\\frontend\\src\\views\\viewTestResults.component.js":"25","C:\\Users\\New User\\Desktop\\Fourth Year\\Usability_Testing_FYP\\WebApp\\usabcheck\\frontend\\src\\components\\tabs.component.js":"26","C:\\Users\\New User\\Desktop\\Fourth Year\\Usability_Testing_FYP\\WebApp\\usabcheck\\frontend\\src\\tabs\\testResultOverview.component.js":"27","C:\\Users\\New User\\Desktop\\Fourth Year\\Usability_Testing_FYP\\WebApp\\usabcheck\\frontend\\src\\tabs\\testResultRecordings.component.js":"28","C:\\Users\\New User\\Desktop\\Fourth Year\\Usability_Testing_FYP\\WebApp\\usabcheck\\frontend\\src\\components\\taskGrading.component.js":"29","C:\\Users\\New User\\Desktop\\Fourth Year\\Usability_Testing_FYP\\WebApp\\usabcheck\\frontend\\src\\components\\videoBars.component.js":"30","C:\\Users\\New User\\Desktop\\Fourth Year\\Usability_Testing_FYP\\WebApp\\usabcheck\\frontend\\src\\utilities\\utils.js":"31","C:\\Users\\New User\\Desktop\\Fourth Year\\Usability_Testing_FYP\\WebApp\\usabcheck\\frontend\\src\\modal\\infoModalUtilities.js":"32","C:\\Users\\New User\\Desktop\\Fourth Year\\Usability_Testing_FYP\\WebApp\\usabcheck\\frontend\\src\\forms\\infoForms.js":"33"},{"size":496,"mtime":1611156966634,"results":"34","hashOfConfig":"35"},{"size":362,"mtime":499162500000,"results":"36","hashOfConfig":"35"},{"size":3733,"mtime":1615734143979,"results":"37","hashOfConfig":"35"},{"size":1054,"mtime":1615735480243,"results":"38","hashOfConfig":"35"},{"size":1295,"mtime":1615312233173,"results":"39","hashOfConfig":"35"},{"size":1618,"mtime":1615314107685,"results":"40","hashOfConfig":"35"},{"size":303,"mtime":1615386368262,"results":"41","hashOfConfig":"35"},{"size":7545,"mtime":1615733543234,"results":"42","hashOfConfig":"35"},{"size":1480,"mtime":1615733554219,"results":"43","hashOfConfig":"35"},{"size":1102,"mtime":1615312457923,"results":"44","hashOfConfig":"35"},{"size":1028,"mtime":1611501102606,"results":"45","hashOfConfig":"35"},{"size":1623,"mtime":1613396456531,"results":"46","hashOfConfig":"35"},{"size":5000,"mtime":1614783458210,"results":"47","hashOfConfig":"35"},{"size":713,"mtime":1615681950282,"results":"48","hashOfConfig":"35"},{"size":3873,"mtime":1615733704316,"results":"49","hashOfConfig":"35"},{"size":8436,"mtime":1615734022088,"results":"50","hashOfConfig":"35"},{"size":4181,"mtime":1615735484734,"results":"51","hashOfConfig":"35"},{"size":12395,"mtime":1615743531171,"results":"52","hashOfConfig":"35"},{"size":3244,"mtime":1615310657753,"results":"53","hashOfConfig":"35"},{"size":196,"mtime":1611528152074,"results":"54","hashOfConfig":"35"},{"size":2871,"mtime":1614779514382,"results":"55","hashOfConfig":"35"},{"size":2506,"mtime":1615310814703,"results":"56","hashOfConfig":"35"},{"size":3490,"mtime":1615311312464,"results":"57","hashOfConfig":"35"},{"size":5549,"mtime":1615743744538,"results":"58","hashOfConfig":"35"},{"size":1020,"mtime":1613228803283,"results":"59","hashOfConfig":"35"},{"size":2738,"mtime":1615733544785,"results":"60","hashOfConfig":"35"},{"size":12676,"mtime":1615733771945,"results":"61","hashOfConfig":"35"},{"size":12707,"mtime":1615746154639,"results":"62","hashOfConfig":"35"},{"size":3115,"mtime":1615733544076,"results":"63","hashOfConfig":"35"},{"size":13096,"mtime":1615733967821,"results":"64","hashOfConfig":"35"},{"size":924,"mtime":1615733586710,"results":"65","hashOfConfig":"35"},{"size":1056,"mtime":1615310602909,"results":"66","hashOfConfig":"35"},{"size":7520,"mtime":1615743483143,"results":"67","hashOfConfig":"35"},{"filePath":"68","messages":"69","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"70"},"rjy0kx",{"filePath":"71","messages":"72","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"70"},{"filePath":"73","messages":"74","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"75","usedDeprecatedRules":"70"},{"filePath":"76","messages":"77","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"70"},{"filePath":"78","messages":"79","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"70"},{"filePath":"80","messages":"81","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"70"},{"filePath":"82","messages":"83","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"70"},{"filePath":"84","messages":"85","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"86","usedDeprecatedRules":"70"},{"filePath":"87","messages":"88","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"70"},{"filePath":"89","messages":"90","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"70"},{"filePath":"91","messages":"92","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"70"},{"filePath":"93","messages":"94","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"70"},{"filePath":"95","messages":"96","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"97","usedDeprecatedRules":"70"},{"filePath":"98","messages":"99","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"70"},{"filePath":"100","messages":"101","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"70"},{"filePath":"102","messages":"103","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"104","usedDeprecatedRules":"70"},{"filePath":"105","messages":"106","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"70"},{"filePath":"107","messages":"108","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"70"},{"filePath":"109","messages":"110","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"70"},{"filePath":"111","messages":"112","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"113","messages":"114","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"70"},{"filePath":"115","messages":"116","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"70"},{"filePath":"117","messages":"118","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"70"},{"filePath":"119","messages":"120","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"121","messages":"122","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"123","usedDeprecatedRules":"70"},{"filePath":"124","messages":"125","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"70"},{"filePath":"126","messages":"127","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"128","usedDeprecatedRules":"70"},{"filePath":"129","messages":"130","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"131","messages":"132","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"133","usedDeprecatedRules":"70"},{"filePath":"134","messages":"135","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"136","usedDeprecatedRules":"70"},{"filePath":"137","messages":"138","errorCount":0,"warningCount":7,"fixableErrorCount":0,"fixableWarningCount":0,"source":"139","usedDeprecatedRules":"70"},{"filePath":"140","messages":"141","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"70"},{"filePath":"142","messages":"143","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"70"},"C:\\Users\\New User\\Desktop\\Fourth Year\\Usability_Testing_FYP\\WebApp\\usabcheck\\frontend\\src\\index.js",[],["144","145"],"C:\\Users\\New User\\Desktop\\Fourth Year\\Usability_Testing_FYP\\WebApp\\usabcheck\\frontend\\src\\reportWebVitals.js",[],"C:\\Users\\New User\\Desktop\\Fourth Year\\Usability_Testing_FYP\\WebApp\\usabcheck\\frontend\\src\\App.js",["146"],"import React, { Component } from \"react\";\nimport { Switch, Route, Link, BrowserRouter as Router} from \"react-router-dom\";\nimport {NotificationContainer, NotificationManager} from 'react-notifications';\n\nimport \"./App.css\";\n\nimport AuthService from \"services/auth.service\";\n\nimport Login from \"views/login.component\";\nimport Register from \"views/register.component\";\nimport Home from \"views/home.component\";\nimport Dashboard from \"views/dashboard.component\";\nimport CreateTest from \"views/createTest.component\";\nimport ViewTestDetails from \"views/viewTestDetails.component\";\nimport ViewTestResults from \"views/viewTestResults.component\";\n\n// package-json\n// \"proxy\": \"http://localhost:8090\",\n// \"proxy\": \"https://usabcheck.herokuapp.com:8080\",\nclass App extends Component {\n  constructor(props) {\n    super(props);\n    this.logOut = this.logOut.bind(this);\n\n    this.state = {\n      currentUser: undefined\n    };\n  }\n\n  componentDidMount() {\n    const user = AuthService.getCurrentUser();\n\n    if (user) {\n      this.setState({\n        currentUser: user\n      });\n    }\n  }\n\n  logOut() {\n    AuthService.logout();\n    localStorage.clear();\n  }\n\n  render() {\n    const { currentUser } = this.state;\n\n    return (\n      <Router>\n      <div>\n        <NotificationContainer/>\n        <nav className=\"main-navbar\">\n          <div className=\"navbar-navDiv\">\n            <Link style={{paddingTop: \"7px\", paddingBottom: \"5px\",  height: \"100%\"}} to={\"/\"} className=\"navDiv-link\">\n              <img \n                src={`${process.env.PUBLIC_URL}/Logo.png`} \n                alt=\"Logo\" \n                style={{\n                  width: \"40px\"\n                }}\n              />\n            </Link>\n          </div>\n\n          <div className=\"navbar-navDiv\">\n            <Link to={\"/\"} className=\"navDiv-link\">\n              UsabCheck\n            </Link>\n          </div>\n\n          <div className=\"navbar-navDiv\">\n            {currentUser && (\n              <li>\n                <Link to={\"/dashboard\"} className=\"navDiv-link\">\n                  Dashboard\n                </Link>\n              </li>\n            )}\n          </div>\n\n          {currentUser ? (\n            <div className=\"navbar-navDiv\">\n              <li className=\"nav-right\">\n                <a href=\"/login\" className=\"navDiv-link\" onClick={this.logOut}>\n                  LogOut\n                </a>\n                {/* <Link to={\"/login\"} className=\"navDiv-link\">\n                  Logout\n                </Link> */}\n              </li>\n              <li className=\"nav-right\">\n                <Link to={\"/dashboard\"} className=\"navDiv-link\">\n                  {currentUser.username}\n                </Link>\n              </li>\n            </div>\n          ) : (\n            <div className=\"navbar-navDiv\">\n              <li className=\"nav-right\">\n                <Link to={\"/register\"} className=\"navDiv-link\">\n                  Sign Up\n                </Link>\n              </li>\n\n              <li className=\"nav-right\">\n                <Link to={\"/login\"} className=\"navDiv-link\">\n                  Login\n                </Link>\n              </li>\n            </div>\n          )}\n        </nav>\n\n        <Switch>\n          <Route exact path=\"/\" component={Home} />\n          <Route exact path=\"/login\" component={Login} />\n          <Route exact path=\"/register\" component={Register} />\n          <Route exact path=\"/dashboard\" component={Dashboard} />\n          <Route exact path=\"/create-test\" component={CreateTest} />\n          <Route exact path=\"/view-test-details\" component={ViewTestDetails} />\n          <Route exact path=\"/view-test-results\" component={ViewTestResults} />\n        </Switch>\n      </div>\n\n      </Router>\n    );\n  }\n}\n\nexport default App;","C:\\Users\\New User\\Desktop\\Fourth Year\\Usability_Testing_FYP\\WebApp\\usabcheck\\frontend\\src\\services\\auth.service.js",[],"C:\\Users\\New User\\Desktop\\Fourth Year\\Usability_Testing_FYP\\WebApp\\usabcheck\\frontend\\src\\modal\\modalTemplate.js",[],"C:\\Users\\New User\\Desktop\\Fourth Year\\Usability_Testing_FYP\\WebApp\\usabcheck\\frontend\\src\\components\\modalContainer.component.js",[],"C:\\Users\\New User\\Desktop\\Fourth Year\\Usability_Testing_FYP\\WebApp\\usabcheck\\frontend\\src\\components\\modalButton.component.js",[],"C:\\Users\\New User\\Desktop\\Fourth Year\\Usability_Testing_FYP\\WebApp\\usabcheck\\frontend\\src\\components\\testContainer.component.js",["147","148","149"],"import React, { Component } from 'react';\r\n\r\nimport ModalContainer from \"components/modalContainer.component\";\r\nimport DropdownGenerator from \"components/dropdownGenerator.component\";\r\nimport { DeleteTestForm } from 'forms/deleteTestForm';\r\nimport Server from \"services/server.service\";\r\nimport { CreateNotification, HandleServerError } from 'utilities/utils.js';\r\n\r\nimport { CreateInfoModals, CreateInfoButton } from 'modal/infoModalUtilities'; \r\nimport { ReferenceNumInfoForm, StatusInfoForm } from 'forms/infoForms';\r\n\r\nexport class TestContainer extends Component {\r\n  constructor(props) {\r\n    super(props);\r\n\r\n    this._deleteTestModal = React.createRef();\r\n\r\n    this.state = {\r\n      selectedOption: \"Settings\",\r\n      taskGradeData: [],\r\n      questionAnswerData: [],\r\n      instanceData: []\r\n    };\r\n  }\r\n\r\n  componentDidMount() {\r\n    const test = this.props.testItem;\r\n\r\n    this.updateTaskGrades(test.testId);\r\n    this.updateQuestionAnswers(test.testId);\r\n    this.updateInstanceData(test.testId);\r\n    this.setInfoModals();\r\n  }\r\n\r\n  componentWillUnmount() {\r\n    this.setState = (state, callback)=>{\r\n        return;\r\n    };\r\n}\r\n\r\n  showDeletePopup() {\r\n    this._deleteTestModal.current.setState({isShown: true});\r\n  }\r\n\r\n  deleteTest(e) {\r\n    e.preventDefault();\r\n    let testName = e.target.deleteTestName.value\r\n    let testId = e.target.deleteTestId.value\r\n\r\n    this._deleteTestModal.current.setState({isShown: false});\r\n    Server.deleteTest(testId, testName).then(response => {\r\n      CreateNotification('success', \"Test Deleted Successfully!\");\r\n      this.props.parentUpdate();\r\n      },\r\n      error => {\r\n        HandleServerError(error);\r\n      }\r\n    );\r\n  }\r\n\r\n  updateTaskGrades(testId) {\r\n    Server.getTasksAndGrades(testId).then(response => {\r\n      this.setState({taskGradeData: response.data});\r\n    });\r\n  }\r\n\r\n  updateQuestionAnswers(testId) {\r\n    Server.getQuestionAndAnswers(testId).then(response => {\r\n      this.setState({questionAnswerData: response.data});\r\n    });\r\n  }\r\n\r\n  updateInstanceData(testId) {\r\n    Server.getTestInstances(testId).then(response => {\r\n      this.setState({instanceData: response.data});\r\n    });\r\n  }\r\n\r\n  changeTestStatus(statusName) {\r\n    var testId = this.props.testItem.testId;\r\n\r\n    Server.changeTestStatus(testId, statusName).then(response => {\r\n      // console.log(response.data);\r\n      if (response.data == 1) {\r\n        CreateNotification('success', \"Status Changed Successfully!\");\r\n      } else {\r\n        CreateNotification(\"error\", \"Changing Status Failed!\");\r\n      }\r\n      this.props.parentUpdate();\r\n    },\r\n    error => {\r\n      HandleServerError(error);\r\n    });\r\n  }\r\n\r\n  generateOptionsDropdown = (test, selectedOption) => {\r\n    let menuItems = [];\r\n\r\n    let item = {};\r\n    item.name = \"Delete\";\r\n    item.params = {\r\n      testName: test.testName,\r\n      testId: test.testId\r\n    };\r\n    item.onSelectFunction = this.showDeletePopup.bind(this);\r\n    menuItems.push(item);\r\n\r\n    item = {};\r\n    var changeToStatus = \"\";\r\n    if (this.props.testItem.testStatus == \"Open\") {\r\n      item.name = \"Close\";\r\n      changeToStatus = \"Closed\" \r\n    } else if (this.props.testItem.testStatus == \"Closed\") {\r\n      item.name = \"Open\";\r\n      changeToStatus = \"Open\"\r\n    }\r\n    item.params = {\r\n      testName: test.testName,\r\n      testId: test.testId\r\n    };\r\n    item.onSelectFunction = this.changeTestStatus.bind(this, changeToStatus);\r\n\r\n    menuItems.push(item);\r\n\r\n    return (\r\n      <DropdownGenerator data={menuItems} initalText={selectedOption}></DropdownGenerator>\r\n    )\r\n  }\r\n\r\n  renderStats() {\r\n    return (\r\n      <div>\r\n        <div className=\"testStat\">\r\n          <span className=\"testStat-label\">No. of Tasks:</span>\r\n          {this.state.taskGradeData[\"tasks\"] ? (\r\n            <span>{this.state.taskGradeData[\"tasks\"].length}</span>\r\n          ) : (\r\n            null\r\n          )}\r\n        </div>\r\n        \r\n        <div className=\"testStat\">\r\n          <span className=\"testStat-label\">No. of Questions:</span>\r\n          {this.state.questionAnswerData[\"questions\"] ? (\r\n            <span>{this.state.questionAnswerData[\"questions\"].length}</span>\r\n          ) : (\r\n            null\r\n          )}\r\n        </div>\r\n        \r\n        <div className=\"testStat\">\r\n          <span className=\"testStat-label\">No. of Participants:</span>\r\n          {this.state.instanceData ? (\r\n            <span>{this.state.instanceData.length}</span>\r\n          ) : (\r\n            null\r\n          )}\r\n        </div>\r\n      </div>\r\n    );\r\n  }\r\n\r\n  setInfoModals() {\r\n    var nameFormPair = {\r\n      \"reference\": ReferenceNumInfoForm,\r\n      \"status\": StatusInfoForm,\r\n    }\r\n    var returnData = CreateInfoModals(nameFormPair);\r\n    this.setState({\r\n      modalList: returnData.modalList, \r\n      infoRefPair: returnData.infoRefPair\r\n    })\r\n  }\r\n  \r\n  showInfoModal(modalName) {\r\n    var ref = this.state.infoRefPair[modalName];\r\n    ref.current.showModal();\r\n  }\r\n\r\n  render() {\r\n    const test = this.props.testItem;\r\n\r\n    return (\r\n      <div className=\"dashboard-testBox\">\r\n        {this.state.modalList}\r\n        <div className=\"testBox-top\">\r\n          <span className=\"testBox-testName\">\r\n            {test.testName}\r\n          </span>\r\n          <span>\r\n            <div>\r\n              <button onClick={() => {\r\n                  this.props.history.push({\r\n                    pathname: 'view-test-details',\r\n                    state: { testId: test.testId }\r\n                  });\r\n                  window.location.reload();\r\n                }} type=\"button\" className=\"secondaryButton button1\">View Test Details\r\n              </button>\r\n              \r\n              <button onClick={() => {\r\n                  this.props.history.push({\r\n                    pathname: 'view-test-results',\r\n                    state: { testId: test.testId, testName: test.testName }\r\n                  });\r\n                  window.location.reload();\r\n                }} type=\"button\" className=\"secondaryButton button1\">View Test Results\r\n              </button>\r\n\r\n              <span style={{marginTop: \"7px\"}}>\r\n                {this.generateOptionsDropdown(test, this.state.selectedOption)}\r\n              </span>\r\n            </div>\r\n            <ModalContainer \r\n              Form={DeleteTestForm} \r\n              ref={this._deleteTestModal} \r\n              buttonClassName=\"secondaryButton deleteButton\" \r\n              triggerText={\"\"}\r\n              onSubmit={this.deleteTest.bind(this)}\r\n              details={test}\r\n              disableButton={true}\r\n            />  \r\n          </span>\r\n        </div>\r\n        <hr className=\"testBox-seperator\"></hr>\r\n        <div className=\"testBox-bottom\">\r\n          <span className=\"testBox-bottom-left\">\r\n            <div>\r\n              {test.status}\r\n            </div>\r\n            <div>\r\n              <span className=\"testStat-label\">Reference Code:</span>{test.referenceCode}\r\n              {CreateInfoButton(\"reference\", this.showInfoModal.bind(this))}\r\n            </div>\r\n\r\n            <div>\r\n              <span className=\"testStat-label\">Launched:</span>{test.launchedDate}\r\n            </div>\r\n          </span>\r\n          <span className=\"testBox-bottom-right\">\r\n            {this.renderStats()}\r\n          </span>\r\n          <div>\r\n            <span className=\"testStat-label\">Status:</span>{test.testStatus}\r\n            {CreateInfoButton(\"status\", this.showInfoModal.bind(this))}\r\n          </div>\r\n        </div>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default TestContainer;\r\n","C:\\Users\\New User\\Desktop\\Fourth Year\\Usability_Testing_FYP\\WebApp\\usabcheck\\frontend\\src\\forms\\deleteProjectForm.js",[],"C:\\Users\\New User\\Desktop\\Fourth Year\\Usability_Testing_FYP\\WebApp\\usabcheck\\frontend\\src\\forms\\createProjectForm.js",[],"C:\\Users\\New User\\Desktop\\Fourth Year\\Usability_Testing_FYP\\WebApp\\usabcheck\\frontend\\src\\forms\\deleteTestForm.js",[],"C:\\Users\\New User\\Desktop\\Fourth Year\\Usability_Testing_FYP\\WebApp\\usabcheck\\frontend\\src\\components\\dropdownGenerator.component.js",[],"C:\\Users\\New User\\Desktop\\Fourth Year\\Usability_Testing_FYP\\WebApp\\usabcheck\\frontend\\src\\views\\register.component.js",["150"],"import React, { Component } from \"react\";\r\nimport Form from \"react-validation/build/form\";\r\nimport Input from \"react-validation/build/input\";\r\nimport CheckButton from \"react-validation/build/button\";\r\n\r\nimport \"styles/form.css\";\r\n\r\nimport AuthService from \"services/auth.service\";\r\n\r\nconst required = value => {\r\n  if (!value) {\r\n    return (\r\n      <div className=\"alert alert-danger\" role=\"alert\">\r\n        This field is required!\r\n      </div>\r\n    );\r\n  }\r\n};\r\n\r\nconst vusername = value => {\r\n  if (value.length < 3 || value.length > 20) {\r\n    return (\r\n      <div className=\"alert alert-danger\" role=\"alert\">\r\n        The username must be between 3 and 20 characters.\r\n      </div>\r\n    );\r\n  }\r\n};\r\n\r\nconst vpassword = value => {\r\n  if (value.length < 6 || value.length > 40) {\r\n    return (\r\n      <div className=\"alert alert-danger\" role=\"alert\">\r\n        The password must be between 6 and 40 characters.\r\n      </div>\r\n    );\r\n  }\r\n};\r\n\r\nexport default class Register extends Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.handleRegister = this.handleRegister.bind(this);\r\n    this.onChangeUsername = this.onChangeUsername.bind(this);\r\n    this.onChangePassword = this.onChangePassword.bind(this);\r\n\r\n    this.state = {\r\n      username: \"\",\r\n      password: \"\",\r\n      successful: false,\r\n      message: \"\"\r\n    };\r\n  }\r\n\r\n  onChangeUsername(e) {\r\n    this.setState({\r\n      username: e.target.value\r\n    });\r\n  }\r\n\r\n  onChangePassword(e) {\r\n    this.setState({\r\n      password: e.target.value\r\n    });\r\n  }\r\n\r\n  handleRegister(e) {\r\n    e.preventDefault();\r\n\r\n    this.setState({\r\n      message: \"\",\r\n      successful: false\r\n    });\r\n\r\n    this.form.validateAll();\r\n\r\n    if (this.checkBtn.context._errors.length === 0) {\r\n      AuthService.register(\r\n        this.state.username,\r\n        this.state.password\r\n      ).then(\r\n        response => {\r\n          this.setState({\r\n            message: response.data.message,\r\n            successful: true\r\n          });\r\n        },\r\n        error => {\r\n          const resMessage =\r\n            (error.response &&\r\n              error.response.data &&\r\n              error.response.data.message) ||\r\n            error.message ||\r\n            error.toString();\r\n\r\n          this.setState({\r\n            successful: false,\r\n            message: resMessage\r\n          });\r\n        }\r\n      );\r\n    }\r\n  }\r\n\r\n  render() {\r\n    return (\r\n      <div>\r\n        <div className=\"loginFormContainer\">\r\n          <h2 id=\"formHeading\">Register</h2>\r\n\r\n          <Form\r\n            onSubmit={this.handleRegister}\r\n            ref={c => {\r\n              this.form = c;\r\n            }}\r\n          >\r\n            {!this.state.successful && (\r\n              <div>\r\n                <div className=\"inputGroup\">\r\n                  <label className=\"fullWidth\" htmlFor=\"username\">Username</label>\r\n                  <Input\r\n                    type=\"text\"\r\n                    className=\"inputField\"\r\n                    name=\"username\"\r\n                    value={this.state.username}\r\n                    onChange={this.onChangeUsername}\r\n                    validations={[required, vusername]}\r\n                  />\r\n                </div>\r\n\r\n                <div className=\"inputGroup\">\r\n                  <label className=\"fullWidth\" htmlFor=\"password\">Password</label>\r\n                  <Input\r\n                    type=\"password\"\r\n                    className=\"inputField\"\r\n                    name=\"password\"\r\n                    value={this.state.password}\r\n                    onChange={this.onChangePassword}\r\n                    validations={[required, vpassword]}\r\n                  />\r\n                </div>\r\n\r\n                <div className=\"inputGroup\">\r\n                  <button className=\"primaryButton centerElement\">Sign Up</button>\r\n                </div>\r\n              </div>\r\n            )}\r\n\r\n            {this.state.message && (\r\n              <div className=\"inputGroup\">\r\n                <div\r\n                  className={\r\n                    this.state.successful\r\n                      ? \"alert alert-success\"\r\n                      : \"alert alert-danger\"\r\n                  }\r\n                  role=\"alert\"\r\n                >\r\n                  {this.state.message}\r\n\r\n                  {this.state.successful == true ? (\r\n                    <button onClick={() => {\r\n                      this.props.history.push({\r\n                        pathname: 'login'\r\n                      });\r\n                      window.location.reload();\r\n                      }} type=\"button\" className=\"primaryButton\">Login\r\n                    </button>\r\n                  ) : (\r\n                    null\r\n                  )}\r\n\r\n                </div>\r\n              </div>\r\n            )}\r\n            <CheckButton\r\n              style={{ display: \"none\" }}\r\n              ref={c => {\r\n                this.checkBtn = c;\r\n              }}\r\n            />\r\n          </Form>\r\n        </div>\r\n      </div>\r\n    );\r\n  }\r\n}","C:\\Users\\New User\\Desktop\\Fourth Year\\Usability_Testing_FYP\\WebApp\\usabcheck\\frontend\\src\\views\\home.component.js",[],"C:\\Users\\New User\\Desktop\\Fourth Year\\Usability_Testing_FYP\\WebApp\\usabcheck\\frontend\\src\\views\\login.component.js",[],"C:\\Users\\New User\\Desktop\\Fourth Year\\Usability_Testing_FYP\\WebApp\\usabcheck\\frontend\\src\\views\\dashboard.component.js",["151","152","153","154"],"import React, { Component, createRef } from \"react\";\r\n\r\nimport { CreateProjectForm } from 'forms/createProjectForm';\r\nimport { DeleteProjectForm } from 'forms/deleteProjectForm';\r\nimport Server from \"services/server.service\";\r\nimport ModalContainer from \"components/modalContainer.component\";\r\nimport TestContainer from \"components/testContainer.component\";\r\nimport DropdownGenerator from \"components/dropdownGenerator.component\";\r\n\r\nimport { CreateNotification, HandleServerError } from 'utilities/utils.js';  \r\n\r\nimport \"bootstrap.min.css\";\r\n\r\nexport default class Login extends Component {\r\n  constructor(props) {\r\n    super(props);\r\n\r\n    // Popup for creating a project\r\n    this._createProjectModal = React.createRef();\r\n    this._deleteProjectModal = React.createRef();\r\n\r\n    this.state = {\r\n      projects: [],\r\n      tests: [],\r\n      selectedProject: {\r\n        projectName: \"Choose Project\",\r\n        projectId: undefined\r\n      },\r\n      testContainers: []\r\n    };\r\n  }\r\n\r\n  update() {\r\n    if (this.state.selectedProject.projectId !== undefined) {\r\n      this.updateTestList(this.state.selectedProject.projectId);\r\n    }\r\n  }\r\n\r\n  async componentDidMount() {\r\n    this._isMounted = true;\r\n    var state = localStorage.getItem('dashboardExitState');\r\n\r\n    this.updateProjectList();\r\n\r\n    if (state) {\r\n      state = JSON.parse(state);\r\n      this.setState(state, this.postStateRestore);\r\n    } \r\n  }\r\n\r\n  postStateRestore() {\r\n    if (this.state.selectedProject && this.state.selectedProject.projectId) {\r\n      this.updateTestList(this.state.selectedProject.projectId)\r\n    }\r\n  }\r\n\r\n  async componentWillUnmount() {\r\n    this._isMounted = false;\r\n    localStorage.setItem('dashboardExitState', JSON.stringify(this.state));\r\n  }\r\n\r\n  updateProjectList() {\r\n    Server.getProjectList().then(response => {\r\n      this.setState({projects: response.data});\r\n    });\r\n  }\r\n\r\n  updateTestList(projectId) {\r\n    Server.getTestList(projectId).then(response => {\r\n      this.setState({tests: response.data});\r\n    });\r\n  }\r\n  \r\n  renderLoadingState = () => (\r\n    <div className=\"post-loading\">\r\n      Loading...\r\n    </div>\r\n  )\r\n\r\n  onProjectSelect(params) {\r\n    params = JSON.parse(params);\r\n\r\n    this.updateTestList(params.projectId);\r\n    this.setState({selectedProject: {\r\n      projectName: params.projectName,\r\n      projectId: params.projectId\r\n    }});\r\n  }\r\n\r\n  generateProjectDropdown = (onSelectFunction, selectedProjectState) => {\r\n    let projects = this.state.projects;\r\n    let menuItems = [];\r\n\r\n    for(let i = 0; i < projects.length; i++) {\r\n      let project = projects[i];\r\n      let item = {};\r\n\r\n      item.name = project.projectName;\r\n      item.params = {\r\n        projectName: project.projectName,\r\n        projectId: project.projectId\r\n      };\r\n      item.onSelectFunction = onSelectFunction;\r\n\r\n      menuItems.push(item);\r\n    }\r\n\r\n    var key = new Date().getTime();\r\n    return (\r\n      <DropdownGenerator key={key} data={menuItems} initalText={selectedProjectState}></DropdownGenerator>\r\n    )\r\n  }\r\n\r\n  createProjectSubmit(e) {\r\n    e.preventDefault();\r\n    let projectName = e.target.projectName.value\r\n\r\n    this._createProjectModal.current.setState({isShown: false});\r\n    Server.createProject(projectName).then(response => {\r\n      CreateNotification('success', \"Project Created Successfully!\");\r\n      this.updateProjectList();\r\n    },\r\n    error => {\r\n      HandleServerError(error);\r\n    });\r\n  }\r\n\r\n  deleteProjectSubmit(e) {\r\n    e.preventDefault();\r\n    let projectId = e.target.deleteProjectId.value\r\n\r\n    if (projectId === undefined || projectId === null || projectId === \"\") {\r\n      return;\r\n    }\r\n\r\n    this._deleteProjectModal.current.setState({isShown: false});\r\n    Server.deleteProject(projectId).then(response => {\r\n      CreateNotification('success', \"Project Deleted Successfully!\");\r\n      this.updateProjectList();\r\n\r\n      if (this.state.selectedProject && this.state.selectedProject.projectId == projectId) {\r\n        this.setState({selectedProject: {\r\n          projectName: \"Choose Project\",\r\n          projectId: undefined\r\n        }});\r\n      }\r\n    },\r\n    error => {\r\n      HandleServerError(error);\r\n    });\r\n  }\r\n\r\n  displayTests() {  \r\n    // console.log(this.state.selectedProject);\r\n    let tests = this.state.tests;\r\n\r\n    if (!tests || this._isMounted == false) {\r\n      return(undefined);\r\n    }\r\n\r\n    // console.log(this._isMounted)\r\n\r\n    var renderItems = [];\r\n    for(let i = 0; i < tests.length; i++) {\r\n      let test = tests[i];\r\n\r\n      // console.log(\"Test: \", test.testName);\r\n\r\n      var key = new Date().getTime() + i;\r\n      renderItems.push(\r\n        <TestContainer \r\n          key={key} \r\n          history={this.props.history} \r\n          parentUpdate={this.update.bind(this)} \r\n          onDelete={null} \r\n          testItem={test}>          \r\n        </TestContainer>\r\n      );\r\n    }\r\n\r\n    return (\r\n      renderItems\r\n    )\r\n  }\r\n\r\n  renderCreateTestButton() {\r\n    return (\r\n      <button onClick={() => {\r\n        this.props.history.push({\r\n          pathname: 'create-test',\r\n          state: { projectId: this.state.selectedProject.projectId, projectName: this.state.selectedProject.projectName}\r\n        });\r\n        window.location.reload();\r\n        }} type=\"button\" className=\"secondaryButton button1\">Create Usability Test\r\n      </button>\r\n    );\r\n  }\r\n\r\n  render() {  \r\n\r\n    // console.log(\"RENDER#\", this.state);\r\n    // console.log(this.state.testContainers)\r\n\r\n    const projects = this.state.projects;\r\n\r\n    if (projects) {\r\n      return (\r\n        <div className=\"mainPageDiv\">\r\n          <h1>Dashboard</h1>\r\n          <hr></hr>\r\n          <div className=\"post-content\">  \r\n            <ModalContainer \r\n              Form={CreateProjectForm} \r\n              ref={this._createProjectModal} \r\n              buttonClassName=\"secondaryButton button1\" \r\n              triggerText={\"Create a Project\"} \r\n              onSubmit={this.createProjectSubmit.bind(this)}\r\n            />   \r\n\r\n            {this.state.projects.length > 0 ? (\r\n              <span>\r\n                {this.generateProjectDropdown(this.onProjectSelect.bind(this), this.state.selectedProject.projectName)}\r\n\r\n                <ModalContainer \r\n                  Form={DeleteProjectForm} \r\n                  ref={this._deleteProjectModal} \r\n                  buttonClassName=\"secondaryButton deleteButton\" \r\n                  triggerText={\"Delete a Project\"}\r\n                  onSubmit={this.deleteProjectSubmit.bind(this)}\r\n                  generateProjectDropdown={this.generateProjectDropdown.bind(this)}\r\n                />\r\n\r\n                {this.state.selectedProject.projectId && this.state.tests.length > 0 ? (\r\n                  <span>\r\n                    {this.renderCreateTestButton()}\r\n                  </span>\r\n                ) : (\r\n                  null\r\n                )}\r\n\r\n                <div>\r\n                    <div>\r\n                      {this.state.selectedProject.projectId && (\r\n                        <h2 style={{width: \"100%\"}}>Usability Tests</h2>\r\n                      )}\r\n\r\n                      {this.state.tests && this.state.tests.length > 0 ? (\r\n                        <div>\r\n                          <div className=\"testContainer\">\r\n                            {/* {this.state.testContainers} */}\r\n                            {this.displayTests()}\r\n                          </div>\r\n                        </div>\r\n                      ) : (\r\n                        <h3>Please create a usability test for this project</h3>\r\n                      )}\r\n\r\n                      {this.state.selectedProject.projectId && this.state.tests.length == 0 ? (\r\n                        <span>\r\n                          {this.renderCreateTestButton()}\r\n                        </span>\r\n                      ) : (\r\n                        null\r\n                      )}\r\n                    </div>\r\n                 \r\n\r\n                  {this.state.selectedProject ? (\r\n                    <div>\r\n                      \r\n                    </div>\r\n                  ):(\r\n                    <h2>You have no tests created</h2>\r\n                  )}\r\n                </div>\r\n              </span>       \r\n             ) : (\r\n              <h2>You have no projects created</h2>\r\n            )}\r\n          </div>\r\n        </div>\r\n      )\r\n    } else {\r\n      return this.renderLoadingState();\r\n    }\r\n\r\n  }\r\n}","C:\\Users\\New User\\Desktop\\Fourth Year\\Usability_Testing_FYP\\WebApp\\usabcheck\\frontend\\src\\services\\server.service.js",[],"C:\\Users\\New User\\Desktop\\Fourth Year\\Usability_Testing_FYP\\WebApp\\usabcheck\\frontend\\src\\views\\createTest.component.js",[],"C:\\Users\\New User\\Desktop\\Fourth Year\\Usability_Testing_FYP\\WebApp\\usabcheck\\frontend\\src\\components\\taskCreate.component.js",[],"C:\\Users\\New User\\Desktop\\Fourth Year\\Usability_Testing_FYP\\WebApp\\usabcheck\\frontend\\src\\services\\store.js",[],"C:\\Users\\New User\\Desktop\\Fourth Year\\Usability_Testing_FYP\\WebApp\\usabcheck\\frontend\\src\\components\\dynamicList.component.js",[],"C:\\Users\\New User\\Desktop\\Fourth Year\\Usability_Testing_FYP\\WebApp\\usabcheck\\frontend\\src\\components\\textQuestionCreate.component.js",[],"C:\\Users\\New User\\Desktop\\Fourth Year\\Usability_Testing_FYP\\WebApp\\usabcheck\\frontend\\src\\components\\mutliplechoiceQuestion.component.js",[],"C:\\Users\\New User\\Desktop\\Fourth Year\\Usability_Testing_FYP\\WebApp\\usabcheck\\frontend\\src\\views\\viewTestDetails.component.js",[],"C:\\Users\\New User\\Desktop\\Fourth Year\\Usability_Testing_FYP\\WebApp\\usabcheck\\frontend\\src\\views\\viewTestResults.component.js",["155"],"import React, { Component } from 'react';\r\n\r\nimport TabGenerator from \"components/tabs.component\"\r\nimport TestResultOverviewTab from \"tabs/testResultOverview.component\"\r\nimport TestResultRecordingsTab from \"tabs/testResultRecordings.component\"\r\n\r\nexport class ViewTestResults extends Component {\r\n  constructor(props) {\r\n    super(props);\r\n\r\n  }\r\n  render() {\r\n    let testId = this.props.location.state.testId;\r\n\r\n    var sendData = [\r\n      {\r\n        label: \"Overview\",\r\n        tabComponent: TestResultOverviewTab\r\n      }, {\r\n        label: \"Recordings\",\r\n        tabComponent: TestResultRecordingsTab\r\n      }\r\n    ];\r\n    \r\n    return (\r\n      <div className=\"mainPageDiv\">\r\n          <h1>Test Results: {this.props.location.state.testName}</h1>\r\n          <hr></hr>\r\n          <div className=\"post-content\">  \r\n            <TabGenerator\r\n              data={sendData}\r\n              testId={testId}\r\n            ></TabGenerator>\r\n          </div>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default ViewTestResults;\r\n","C:\\Users\\New User\\Desktop\\Fourth Year\\Usability_Testing_FYP\\WebApp\\usabcheck\\frontend\\src\\components\\tabs.component.js",[],"C:\\Users\\New User\\Desktop\\Fourth Year\\Usability_Testing_FYP\\WebApp\\usabcheck\\frontend\\src\\tabs\\testResultOverview.component.js",["156","157","158","159"],"import React, { Component } from 'react';\r\nimport Server from \"services/server.service\";\r\n// import ApexCharts from 'apexcharts'\r\nimport Chart from \"react-apexcharts\";\r\n\r\nexport class TestResultOverviewTab extends Component {\r\n  constructor(props) {\r\n    super(props);\r\n\r\n    this.state = {\r\n      displayStatus: \"none\",\r\n\r\n      taskGradeData: {},\r\n      questionAnswerData: {},\r\n      instanceData: [],\r\n\r\n      taskChartList: [],\r\n      overallChart: [],\r\n      answerChartList: [],\r\n      textAnswerList: [],\r\n    };\r\n  }\r\n\r\n  async componentDidMount() {\r\n    // console.log(\"Props\", this.props);\r\n    this.updateInstanceData(this.props.testId);\r\n    this.updateTaskGrades(this.props.testId);\r\n    this.updateQuestionAnswers(this.props.testId);\r\n  }\r\n\r\n  componentDidUpdate() {\r\n    // console.log(\"Updated\");\r\n  }\r\n\r\n  disable() {\r\n    this.setState({displayStatus: \"none\"});\r\n  }\r\n\r\n  enable() {\r\n    this.setState({displayStatus: \"\"}, () => {\r\n      this.updateInstanceData(this.props.testId);\r\n      this.updateTaskGrades(this.props.testId);\r\n      this.updateQuestionAnswers(this.props.testId);\r\n    });\r\n  }\r\n\r\n\r\n  updateTaskGrades(testId) {\r\n    Server.getTasksAndGrades(testId).then(response => {\r\n      // console.log(response.data);\r\n      this.setState({\r\n        taskGradeData: response.data}, () => {\r\n          this.renderTaskCharts(\"chartPerTask\", \"taskChartList\");\r\n          this.renderTaskCharts(\"overall\", \"overallChart\");\r\n        });\r\n    });\r\n  }\r\n\r\n  updateQuestionAnswers(testId) {\r\n    Server.getQuestionAndAnswers(testId).then(response => {\r\n      // console.log(response.data);\r\n      this.setState({\r\n        questionAnswerData: response.data}, () => {\r\n          this.renderAnswerCharts();\r\n        });\r\n    });\r\n  }\r\n\r\n  updateInstanceData(testId) {\r\n    Server.getTestInstances(testId).then(response => {\r\n      // console.log(response.data);\r\n      this.setState({\r\n        instanceData: response.data}\r\n      )\r\n    });\r\n  }\r\n\r\n  getTaskSettings() {\r\n    var colors = ['#55FF32', '#ff3232', '#B2B2B2'];\r\n    var strokeColors = ['#4FE52D', '#E52D2D', '#999999'];\r\n\r\n    var options = {\r\n      chart: {\r\n        height: 350,\r\n        type: 'bar',\r\n        events: {\r\n          click: function(chart, w, e) {\r\n            // console.log(chart, w, e)\r\n          }\r\n        },\r\n      },\r\n      colors: colors,\r\n      plotOptions: {\r\n        bar: {\r\n          borderRadius: 6,\r\n          columnWidth: '45%',\r\n          distributed: true,\r\n        }\r\n      },\r\n      dataLabels: {\r\n        enabled: false\r\n      },\r\n      stroke: {\r\n        show: true,\r\n        width: 1,\r\n        colors: strokeColors\r\n      },\r\n      legend: {\r\n        show: false\r\n      },\r\n      xaxis: {\r\n        categories: [\r\n          [\"Pass\"],\r\n          [\"Fail\"],\r\n          [\"Not Graded\"], \r\n        ],\r\n        labels: {\r\n          style: {\r\n            colors: '#000000',\r\n            fontSize: '16px'\r\n          }\r\n        }\r\n      },\r\n      yaxis: {\r\n        labels: {\r\n          style: {\r\n            colors: '#000000',\r\n            fontSize: '16px'\r\n          }\r\n        }\r\n      }\r\n    }\r\n\r\n    return options;\r\n  }\r\n\r\n  parseTaskGradeData() {\r\n    var parsedChartData = {\r\n      totalGradeCount: {},\r\n      individualTaskCounts: []\r\n    };\r\n    var tasks = this.state.taskGradeData[\"tasks\"];\r\n    var grades = this.state.taskGradeData[\"grades\"];\r\n    var totalGradeCount = {\r\n      \"Pass\": 0,\r\n      \"Fail\": 0,\r\n      \"Not Graded\": 0\r\n    }\r\n\r\n    for (let i = 0; i < tasks.length; i++) {\r\n      var task = tasks[i];\r\n      \r\n      var individualTaskCount = {\r\n        \"Task\": task,\r\n        \"Pass\": 0,\r\n        \"Fail\": 0,\r\n        \"Not Graded\": 0\r\n      }\r\n\r\n      for (let j = 0; j < grades.length; j++) {\r\n        var grade = grades[j];\r\n        if (grade[\"taskId\"] === task[\"taskId\"]) {\r\n          var gradeName = grade[\"grade\"];\r\n          individualTaskCount[gradeName] += 1;\r\n          totalGradeCount[gradeName] += 1;\r\n        }\r\n      }\r\n\r\n      parsedChartData[\"individualTaskCounts\"].push(individualTaskCount);\r\n    }\r\n\r\n    parsedChartData[\"totalGradeCount\"] = totalGradeCount\r\n\r\n    return parsedChartData;\r\n  }\r\n\r\n  renderTaskCharts(type, listName) {\r\n    var options = this.getTaskSettings()\r\n    var parsedChartData = this.parseTaskGradeData();\r\n\r\n    var taskChartList = [];    \r\n\r\n    if (type == \"chartPerTask\") {\r\n      var individualTaskCounts = parsedChartData[\"individualTaskCounts\"]\r\n\r\n      for (let i = 0; i < individualTaskCounts.length; i++) {\r\n        var gradeCount = individualTaskCounts[i]\r\n\r\n        // console.log(gradeCount);\r\n\r\n        var series = [{\r\n          data: [gradeCount[\"Pass\"], gradeCount[\"Fail\"], gradeCount[\"Not Graded\"]]\r\n        }];\r\n        var key = new Date().getTime() + i.toString();\r\n        taskChartList.push(\r\n          <div key={key} style={{display: \"inline-block\", \"marginRight\": \"30px\"}}>\r\n            <h3 className=\"chartHeading\">\r\n            [{gradeCount[\"Task\"][\"sequenceNumber\"] + 1}] {gradeCount[\"Task\"][\"taskName\"]}\r\n            </h3>\r\n            <Chart\r\n              options={options}\r\n              series={series}\r\n              type=\"bar\"\r\n              className=\"genericChart barChart\"\r\n            />\r\n          </div>\r\n        );\r\n      }\r\n\r\n    } else if (type == \"overall\") {\r\n      var totalCount = parsedChartData[\"totalGradeCount\"]\r\n\r\n      var series = [{\r\n        data: [totalCount[\"Pass\"], totalCount[\"Fail\"], totalCount[\"Not Graded\"]]\r\n      }];\r\n      \r\n      var key = new Date().getTime() + \"0\";\r\n      taskChartList.push(\r\n        <div key={key} style={{display: \"inline-block\", \"marginRight\": \"30px\"}}>\r\n          <h3 className=\"chartHeading\">\r\n            Success Rate Across All Tasks\r\n          </h3>\r\n          <h4 style={{marginBottom: \"5px\"}}>No. of Tasks Completed by all Participants: {totalCount[\"Pass\"] + totalCount[\"Fail\"] + totalCount[\"Not Graded\"]}</h4>\r\n          <Chart\r\n            options={options}\r\n            series={series}\r\n            type=\"bar\"\r\n            className=\"genericChart barChart\"\r\n          />\r\n        </div>\r\n      );\r\n    }\r\n\r\n    this.setState({[listName]: taskChartList});\r\n  }\r\n\r\n  getPieChartOptions() {\r\n    var options = {\r\n      chart: {\r\n        type: 'pie'\r\n      },\r\n      plotOptions: {\r\n        pie: {\r\n          startAngle: 0,\r\n          endAngle: 360,\r\n          expandOnClick: true,\r\n          offsetX: -10,\r\n          offsetY: 10,\r\n          customScale: 1,\r\n          dataLabels: {\r\n              offset: -10,\r\n              minAngleToShowLabel: 0\r\n          }, \r\n        },\r\n      },\r\n      dataLabels: {\r\n        enabled: true,\r\n        textAnchor: 'end',\r\n        style: {\r\n          fontSize: '16px',\r\n          colors: [\"#000000\"],\r\n          fontWeight: 'bold',\r\n        },\r\n        dropShadow: {\r\n          enabled: false,\r\n        },\r\n      },\r\n      legend: {\r\n        fontSize: \"16px\",\r\n        horizontalAlign: 'right',\r\n        width: 200,\r\n      }\r\n    };\r\n\r\n    return options;\r\n  }\r\n\r\n  createTextAnswerBox(answers, question) {\r\n    var answerList = [];\r\n\r\n    for (let j = 0; j < answers.length; j++) {\r\n      var answerObj = answers[j];\r\n      if (answerObj[\"questionId\"] === question[\"questionId\"]) {\r\n        var answer = JSON.parse(answerObj[\"answerJSON\"])[\"answer\"];\r\n        answerList.push(\r\n          <div key={j}>\r\n            <span style={{\"fontWeight\": \"none\"}}>{answer}</span>\r\n            <hr style={{\"margin\": \"5px 0 5px\"}}></hr>\r\n          </div>\r\n        );\r\n      }\r\n    }\r\n\r\n    return(\r\n      <div>\r\n        {answerList}\r\n      </div>\r\n    )\r\n  }\r\n\r\n  createMultipleChoicePieChart(options, answers, question) {\r\n    var questionConfigsJSON = JSON.parse(question[\"questionConfigsJSON\"]);\r\n\r\n    // Create a dictionary with all the answer options and their count\r\n    var labelsAndCount = {};\r\n    var choices = questionConfigsJSON[\"choices\"];\r\n    for (let n = 0; n < choices.length; n++) {\r\n      let choice = choices[n][\"value\"];\r\n      labelsAndCount[choice] = 0;\r\n    }\r\n    // Iterate over answers and if the questionId matches then increment the value of the answer\r\n    for (let j = 0; j < answers.length; j++) {\r\n      var answerObj = answers[j];\r\n      if (answerObj[\"questionId\"] === question[\"questionId\"]) {\r\n        var answer = JSON.parse(answerObj[\"answerJSON\"])[\"answer\"];\r\n        labelsAndCount[answer] += 1;\r\n      }\r\n    }\r\n\r\n    var series = [];\r\n    var labels = [];\r\n    Object.keys(labelsAndCount).forEach(function(key) {\r\n      labels.push(key);\r\n      series.push(labelsAndCount[key]);\r\n    });\r\n    options.labels = labels\r\n\r\n    // console.log(\"Creating Chart!\", options, options.labels, series);\r\n\r\n    var pieChart = \r\n      <Chart\r\n        options={options}\r\n        series={series}\r\n        type=\"pie\"\r\n        className=\"genericChart pieChart\"\r\n      />\r\n    \r\n    return pieChart;\r\n  }\r\n\r\n  renderAnswerCharts() {\r\n    var answerChartList = [];\r\n    var textAnswerList = [];\r\n    var questions = this.state.questionAnswerData[\"questions\"];\r\n    var answers = this.state.questionAnswerData[\"answers\"];\r\n\r\n    // Iterate over questions\r\n    for (let i = 0; i < questions.length; i++) {\r\n      var options = this.getPieChartOptions();\r\n      var question = questions[i];\r\n      var questionConfigsJSON = JSON.parse(question[\"questionConfigsJSON\"]);\r\n      \r\n      // Show multiple choice questions\r\n      if (questionConfigsJSON[\"questionType\"] === \"multiple-choice\") {\r\n        var pieChart = this.createMultipleChoicePieChart(options, answers, question);\r\n\r\n        answerChartList.push(\r\n          <div key={i} className=\"pieChartContainer\">\r\n            <h3 className=\"chartHeading\" >\r\n              [{question[\"sequenceNumber\"] + 1}] Question: <i>{questionConfigsJSON[\"questionText\"]}</i>\r\n            </h3>\r\n            {pieChart}\r\n          </div>\r\n        );\r\n\r\n      } else if (questionConfigsJSON[\"questionType\"] === \"text\") {\r\n        var textAnswerBox = this.createTextAnswerBox(answers, question);\r\n        \r\n        // console.log(textAnswerBox);\r\n\r\n        textAnswerList.push(\r\n          <div key={i} className=\"textAnswerContainer\">\r\n              <h3 className=\"chartHeading\">\r\n                [{question[\"sequenceNumber\"] + 1}] Question: <i>{questionConfigsJSON[\"questionText\"]}</i>\r\n              </h3>\r\n              <h4  style={{display: \"block\", textAlign: \"left\", margin: \"5px 0 5px\"}}>Answers: </h4>\r\n              <div style={{\"backgroundColor\": \"white\", \"padding\": \"5px 15px 15px\", overflow: \"auto\", maxHeight: \"250px\"}}>\r\n                {textAnswerBox}\r\n              </div>\r\n          </div>\r\n        );\r\n      }\r\n    }\r\n\r\n    this.setState({answerChartList: answerChartList});\r\n    this.setState({textAnswerList: textAnswerList});\r\n  }\r\n\r\n  render() {\r\n    return (\r\n      <React.Fragment>\r\n\r\n        <div style={{display: this.state.displayStatus}}>\r\n          <h2>Details</h2>\r\n          <hr className=\"hr2\"></hr>\r\n          <h3>No. of Participants: {this.state.instanceData.length}</h3>\r\n\r\n          {this.state.taskGradeData[\"tasks\"] ? (\r\n            <h3>No. of Tasks: {this.state.taskGradeData[\"tasks\"].length}</h3>\r\n          ) : (\r\n            null\r\n          )}\r\n          {this.state.questionAnswerData[\"questions\"] ? (\r\n            <h3>No. of Questions: {this.state.questionAnswerData[\"questions\"].length}</h3>\r\n          ) : (\r\n            null\r\n          )}\r\n          <hr></hr>\r\n\r\n          {this.state.instanceData.length > 0 ? (\r\n            <span>\r\n              <br></br>\r\n              <div className=\"chartHolder\">\r\n                <h2>Overall Task Success Rate</h2>\r\n                <hr className=\"hr2\"></hr>\r\n                {this.state.overallChart}\r\n              </div>\r\n\r\n              <br></br>\r\n              <div className=\"chartHolder\">\r\n                <h2>Individual Task Performance</h2>\r\n                <hr className=\"hr2\"></hr>\r\n                {this.state.taskChartList}\r\n              </div>\r\n\r\n              <br></br>\r\n              <div className=\"chartHolder\">\r\n                <h2>Multiple-Choice Question Answers</h2>\r\n                <hr className=\"hr2\"></hr>\r\n                {this.state.answerChartList}\r\n              </div>\r\n\r\n              <br></br>\r\n              <div className=\"chartHolder\">\r\n                <h2>Text Question Answers</h2>\r\n                <hr className=\"hr2\"></hr>\r\n                {this.state.textAnswerList}\r\n              </div>\r\n            </span>\r\n          ) : ( \r\n            <span>\r\n              <h3>There is no data to display as no participants have taken the test.</h3>\r\n              <hr></hr>\r\n            </span>\r\n          )}\r\n        </div>  \r\n      </React.Fragment>\r\n    )\r\n  }\r\n}\r\n\r\nexport default TestResultOverviewTab;\r\n","C:\\Users\\New User\\Desktop\\Fourth Year\\Usability_Testing_FYP\\WebApp\\usabcheck\\frontend\\src\\tabs\\testResultRecordings.component.js",["160","161","162","163"],"C:\\Users\\New User\\Desktop\\Fourth Year\\Usability_Testing_FYP\\WebApp\\usabcheck\\frontend\\src\\components\\taskGrading.component.js",["164","165"],"import React, { Component } from 'react';\r\nimport Server from \"services/server.service\";\r\n\r\nexport class TaskGrading extends Component {\r\n  constructor(props) {\r\n    super(props);\r\n\r\n    this.state = {\r\n      gradeButtons: [],\r\n      currentGrade: this.props.data.grade\r\n    };\r\n  }\r\n\r\n  componentDidMount() {\r\n    \r\n  }\r\n\r\n  setGrade(taskGradeId, grade) {\r\n    // console.log(taskGradeId, grade);\r\n\r\n    Server.updateTaskGrade(taskGradeId, grade).then(response => {\r\n      // console.log(response.data);\r\n      this.setState({\r\n        taskGradeData: response.data}, () => {\r\n          if (response.data == 1) {\r\n            this.setState({currentGrade: grade});\r\n          }\r\n        });\r\n    });\r\n  }\r\n\r\n  generateButtons() {\r\n    // console.log(this.state.currentGrade);\r\n\r\n    var buttons = [];\r\n\r\n    var data = this.props.data;\r\n    var currentGrade = this.state.currentGrade;\r\n    var buttonDataList = [\r\n      {\r\n        buttonLabel: \"Fail\",\r\n        style: {backgroundColor: \"#FF5B5E\", border: \"1px solid red\"}\r\n      },\r\n      {\r\n        buttonLabel: \"Pass\",\r\n        style: {backgroundColor: \"#8BFF5E\", border: \"1px solid green\"}\r\n      },\r\n      {\r\n        buttonLabel: \"Not Graded\",\r\n        style: {backgroundColor: \"#779BFF\", border: \"1px solid blue\"}\r\n      }\r\n    ];\r\n\r\n    var key = 0;\r\n    buttonDataList.forEach(buttonData => {\r\n      var style = {};\r\n      if (currentGrade == buttonData.buttonLabel) {\r\n        style = buttonData.style;\r\n      }\r\n      buttons.push (\r\n        <button key={key} onClick={this.setGrade.bind(this, data.taskGradeId, buttonData.buttonLabel)} className=\"gradingButtons\" style={style}>\r\n          {buttonData.buttonLabel}\r\n        </button>\r\n      )\r\n      key += 1;\r\n    });\r\n\r\n    return buttons;\r\n  }\r\n\r\n  generateTaskText() {\r\n    var data = this.props.data;\r\n    // console.log(data);\r\n    var stepsJSON = JSON.parse(data.stepsJSON);\r\n    // console.log(stepsJSON);\r\n\r\n    var taskStepsList = [];\r\n\r\n    var key = 0;\r\n    for (let i = 0; i < stepsJSON.length; i++) {\r\n      taskStepsList.push(\r\n        <label key={key} style={{display: \"block\", textAlign:\"left\", paddingLeft: \"10px\"}}>{stepsJSON[i][\"value\"]}</label>\r\n      )\r\n      key += 1;\r\n    }\r\n    for (let i = 0; i < stepsJSON.length; i++) {\r\n      taskStepsList.push(\r\n        <label key={key} style={{display: \"block\", textAlign:\"left\", paddingLeft: \"10px\"}}>{stepsJSON[i][\"value\"]}</label>\r\n      )\r\n      key += 1;\r\n    }\r\n\r\n    return taskStepsList;\r\n  }\r\n\r\n  render() {\r\n    var data = this.props.data;\r\n    // console.log(data);\r\n  \r\n    return (\r\n      <div className=\"taskGradeBox\">\r\n        Task: <h4 style={{display: 'inline-block', margin: \"0 0 20px\"}}>{data.taskName}</h4>\r\n        <div>\r\n          <div readOnly style={{width: \"95%\", height: \"100px\", border: \"1px solid gray\", borderRadius: \"3px\", marginBottom: \"15px\", overflow: \"auto\"}}>\r\n            {this.generateTaskText()}\r\n          </div>\r\n        </div>\r\n        <div>\r\n          {this.generateButtons()}\r\n          {/* {this.state.gradeButtons} */}\r\n        </div>\r\n      </div>\r\n    )\r\n  }\r\n}\r\n\r\nexport default TaskGrading;\r\n","C:\\Users\\New User\\Desktop\\Fourth Year\\Usability_Testing_FYP\\WebApp\\usabcheck\\frontend\\src\\components\\videoBars.component.js",["166","167"],"import React, { Component } from 'react';\r\n\r\nimport { CreateInfoModals, CreateInfoButton } from 'modal/infoModalUtilities'; \r\nimport { EntireVideoTimelineInfoForm, ZoomedInTimelineInfoForm } from 'forms/infoForms';\r\n\r\nexport class VideoBars extends Component {\r\n  constructor(props) {\r\n    super(props);\r\n\r\n    this.state = {\r\n      barSliderWindowX: 0, // The position of the zoomed in slider \"window\" on the \"entire\" bar\r\n      barWindowWidth: 0,   // The size of the zoomed in slider \"window\" on the \"entire\" bar\r\n      infoVisible: true,   // Hide/Show labels\r\n\r\n      // DATA\r\n      videoTimeStamps: this.props.data.videoTimeStamps, \r\n      testDetails: this.props.data.testDetails,\r\n      player: this.props.data.player,\r\n      videoDuration: this.props.data.videoDuration\r\n    };\r\n  }\r\n\r\n  componentDidUpdate() {\r\n    this.onBarScroll(\"firstRender\");\r\n  }\r\n\r\n  componentDidMount() {\r\n    this.setInfoModals();\r\n    this.onBarScroll(\"firstRender\");\r\n  }\r\n\r\n  // Get the spans that make up the emotion bar\r\n  generateEmotionSpanList(pixelTimeUnit, height) {\r\n    var labelColours = {\r\n      \"Neutral\": \"none\",\r\n      \"Sad\": \"#0099ff\",\r\n      \"Happy\": \"#00ff00\",     \r\n      \"Angry\": \"#ff0000\",    \r\n      \"Fear\": \"#6600cc\",\r\n      \"Disgust\": \"#333399\",\r\n      \"Surprise\": \"#FFD800\"\r\n    }\r\n\r\n    var emotionSpanList = [];\r\n    for (let i = 0; i < this.state.videoTimeStamps.length; i++) {\r\n      let timeStamp = this.state.videoTimeStamps[i];\r\n      let type = timeStamp[\"type\"]\r\n\r\n      if (type === \"emotion\") {\r\n        let startTime = parseFloat(timeStamp[\"startTime\"])\r\n        let endTime = parseFloat(timeStamp[\"endTime\"]);\r\n        let label = timeStamp[\"label\"];\r\n\r\n        if (label === \"Neutral\") {\r\n          continue;\r\n        }\r\n\r\n        let color = labelColours[label];\r\n        \r\n        let offetX = pixelTimeUnit * startTime;\r\n        let length = pixelTimeUnit * (endTime - startTime);\r\n\r\n        if (length < 1) {\r\n          length = 1;\r\n        }\r\n\r\n        if (!isNaN(length)) {\r\n          emotionSpanList.push(\r\n            <div key={i} className=\"timelineSpan\" onClick={this.props.functions.setVideoTime.bind(this, startTime)}\r\n              style={{\r\n                position: \"absolute\",\r\n                left: offetX, \r\n                width: length, \r\n                height: height,\r\n                backgroundColor: color\r\n                }}\r\n              >\r\n            </div>\r\n          );\r\n        }\r\n      }\r\n    }\r\n\r\n    return emotionSpanList;\r\n  }\r\n\r\n  // Create the spans that make up the task bar\r\n  generateTaskSpanList(pixelTimeUnit, height) {\r\n    var labelColours = {\r\n      \"task\": \"rgb(127, 201, 255)\",\r\n      \"text\": \"rgb(255, 233, 127)\",     \r\n      \"multiple-choice\": \"rgb(255, 127, 127)\"\r\n    }\r\n\r\n    var spanList = [];\r\n    for (let i = 0; i < this.state.videoTimeStamps.length; i++) {\r\n      let timeStamp = this.state.videoTimeStamps[i];\r\n      let type = timeStamp[\"type\"]\r\n\r\n      if (type === \"sequence\") {\r\n        let startTime = parseFloat(timeStamp[\"startTime\"])\r\n        let endTime = parseFloat(timeStamp[\"endTime\"]);\r\n        let sequenceNumber = timeStamp[\"label\"];\r\n        let sequenceItem = this.state.testDetails.sequenceData.find(item => item.sequenceNumber === parseInt(sequenceNumber));\r\n\r\n        let color;\r\n        if (\"taskId\" in sequenceItem) {\r\n          color = labelColours[\"task\"];\r\n        } else if (\"questionId\" in sequenceItem) {\r\n          let questionConfigsJSON = JSON.parse(sequenceItem[\"questionConfigsJSON\"]);\r\n          color = labelColours[questionConfigsJSON[\"questionType\"]];\r\n        }\r\n        \r\n        let offetX = pixelTimeUnit * startTime;\r\n        let length = pixelTimeUnit * (endTime - startTime);\r\n\r\n        if (length < 1) {\r\n          length = 1;\r\n        }\r\n\r\n        if (!isNaN(length)) {\r\n          spanList.push(\r\n            <div key={i} className=\"timelineSpan\" onClick={this.props.functions.setVideoTime.bind(this, startTime)}\r\n              style={{\r\n                position: \"absolute\",\r\n                left: offetX, \r\n                width: length, \r\n                height: height,\r\n                backgroundColor: color,\r\n                borderRight: \"1px solid black\"\r\n                }}\r\n              >\r\n            </div>\r\n          );\r\n        }\r\n      }\r\n    }\r\n    // console.log(\"-------------\")\r\n    return spanList;\r\n  }\r\n\r\n  // Create a bar\r\n  renderTimelineBar(type) {\r\n    var frameContainer = document.getElementById('videoFrameContainer')\r\n\r\n    // if video has not yet rendered and the player for the video was not yet created\r\n    if (frameContainer && this.state.player && this.state.videoDuration !== 0) {} else {\r\n      // console.log(\"NULL CONDITION\");\r\n      return null;\r\n    }\r\n\r\n    var videoLength = this.state.videoDuration;\r\n    var frameContainerWidth = frameContainer.clientWidth;\r\n    var timelineBarWidth = frameContainerWidth - 266; // 266 is a consistent size of the labels next to the bar in vimeo\r\n\r\n    // Generate the emotion strips that go inside the bar\r\n    var pixelTimeUnit;\r\n    var emotionStripHeight;\r\n    var emotionSpanList;\r\n    if (type === \"entire\") {\r\n      pixelTimeUnit = timelineBarWidth/videoLength;\r\n      emotionStripHeight = \"18px\"\r\n      emotionSpanList = this.generateEmotionSpanList(pixelTimeUnit, emotionStripHeight);\r\n\r\n    } else if (type === \"zoomed-in\") {\r\n      pixelTimeUnit = 60;\r\n      emotionStripHeight = \"38px\";\r\n      emotionSpanList = this.generateEmotionSpanList(pixelTimeUnit, emotionStripHeight);\r\n    \r\n    }  else if (type === \"task\") {\r\n      pixelTimeUnit = timelineBarWidth/videoLength;\r\n      var taskStripHeight = \"14px\";\r\n      var taskSpanList = this.generateTaskSpanList(pixelTimeUnit, taskStripHeight);\r\n    }\r\n\r\n    // Create the requested emotion bar\r\n    var timelineBar;\r\n    if (type === \"entire\") {\r\n      timelineBar = this.createEntireBar(emotionSpanList, timelineBarWidth);\r\n\r\n    } else if (type === \"zoomed-in\"){\r\n      var innerBarWidth = (pixelTimeUnit * videoLength) + \"px\";\r\n      // console.log(innerBarWidth);\r\n      var innerBarStyle =  {\r\n        width: innerBarWidth,\r\n        position: \"absolute\"\r\n      };\r\n      timelineBar = this.createZoomedBar(emotionSpanList, timelineBarWidth, innerBarStyle);\r\n\r\n    } else if (type === \"task\"){\r\n      timelineBar = this.createTaskBar(taskSpanList, timelineBarWidth);\r\n    }\r\n\r\n    return timelineBar;\r\n  }\r\n\r\n  // Create the bar the shows the data across the entire video. Hence, \"entire bar\"\r\n  createEntireBar(emotionSpanList, emotionBarWidth) {\r\n    var barStyle = {\r\n      width: emotionBarWidth + \"px\", \r\n    };\r\n\r\n    var emotionBar = \r\n      <div className=\"genericVideoBar\" id=\"entireEmotionBar\" style={barStyle}>\r\n        <div id=\"innerBarEntire\" style={{position: \"absolute\"}}></div>\r\n        {emotionSpanList}\r\n\r\n        <div id=\"barSliderWindow\" style={{\r\n          left: \"calc(\" + this.state.barSliderWindowX + \"% - 2px)\", \r\n          width: \"calc(\" + this.state.barWindowWidth + \"% + 6px)\"\r\n          }}>\r\n        </div>\r\n      </div>\r\n\r\n    return emotionBar;\r\n  }\r\n\r\n  // Create a bar that zooms in on the portion of the entire bar. Hence, zoomed-in bar\r\n  createZoomedBar(emotionSpanList, emotionBarWidth, innerBarStyle) {\r\n    var barStyle = {\r\n      width: emotionBarWidth + \"px\", \r\n    };\r\n\r\n    var emotionBar = \r\n      <div className=\"genericVideoBar\" id=\"zoomedBar\" style={barStyle} onScroll={this.onBarScroll.bind(this)}>\r\n        <div id=\"innerBarZoomed\" style={innerBarStyle}>\r\n          {emotionSpanList}\r\n        </div>\r\n      </div>\r\n\r\n    return emotionBar;\r\n  }\r\n\r\n  // Creathe the bar that shows when the user starts and ends tasks and questions\r\n  createTaskBar(taskSpanList, barWidth) {\r\n    var barStyle = {\r\n      width: barWidth + \"px\", \r\n    };\r\n\r\n    var taskBar = \r\n      <div className=\"genericVideoBar\" id=\"entireTaskBar\" style={barStyle}>\r\n        <div id=\"innerBarEntire\" style={{position: \"absolute\"}}></div>\r\n        {taskSpanList}\r\n      </div>\r\n    \r\n    return taskBar;\r\n  }\r\n\r\n  // This method is used to move the window slider on the \"entire\" bar \r\n  onBarScroll(caller) {\r\n    var zoomedBar = document.getElementById('zoomedBar');\r\n    var innerBar = document.getElementById('innerBarZoomed');\r\n\r\n    if (!zoomedBar) {\r\n      return;\r\n    }\r\n    if (caller === \"firstRender\") {\r\n      if (this.state.barWindowWidth !== 0) {\r\n        return;\r\n      }\r\n    }\r\n    var innerBarWidth = innerBar.clientWidth;\r\n    if (innerBarWidth === 0){\r\n      return;\r\n    }\r\n\r\n    var barWidth = zoomedBar.clientWidth;\r\n    var scrollPos = zoomedBar.scrollLeft;\r\n    var barWindowStart = (scrollPos / innerBarWidth) * 100;\r\n    var barWindowWidthPercentage = (barWidth / innerBarWidth) * 100;\r\n\r\n    this.setState({\r\n      barSliderWindowX: barWindowStart,\r\n      barWindowWidth: barWindowWidthPercentage\r\n    });\r\n  }\r\n\r\n  // Creates the legend for the emotions bar and the task bar\r\n  renderLegend(type) {\r\n    var legendList = [];\r\n    if (type === \"emotion\") {\r\n      var legendDataList = [\r\n        {label: \"Happy\", color: \"#00ff00\"},\r\n        {label: \"Sad\", color: \"#0099ff\"},\r\n        {label: \"Angry\", color: \"#ff0000\"},\r\n        {label: \"Surprise\", color: \"#FFD800\"},\r\n        {label: \"Fear\", color: \"#6600cc\"},\r\n        {label: \"Disgust\", color: \"#333399\"}\r\n      ];\r\n\r\n      var key = 0;\r\n      legendDataList.forEach(function(item) {\r\n        legendList.push(\r\n          <div key={key} style={{marginTop: \"5px\", display: \"inline-block\"}}>\r\n            <span style={{backgroundColor: item.color}} className=\"legendColorBox\"></span>\r\n            <span className=\"legendText\">{item.label}</span>\r\n          </div>\r\n        )\r\n        key += 1;\r\n      });\r\n\r\n    } else if (type === \"task\") {\r\n      var legendDataList = [\r\n        {label: \"Task\", color: \"rgb(127, 201, 255)\"},\r\n        {label: \"Text Question\", color: \"rgb(255, 233, 127)\"},\r\n        {label: \"Multiple-Choice Question\", color: \"rgb(255, 127, 127)\"},\r\n      ];\r\n\r\n      var key = 0;\r\n      legendDataList.forEach(function(item) {\r\n        legendList.push(\r\n          <div key={key} style={{marginTop: \"5px\", display: \"inline-block\"}}>\r\n            <span style={{backgroundColor: item.color}} className=\"legendColorBox\"></span>\r\n            <span className=\"legendText\">{item.label}</span>\r\n          </div>\r\n        )\r\n        key += 1;\r\n      });\r\n    }\r\n\r\n    return (\r\n      <div>\r\n        {legendList}\r\n      </div>\r\n    )\r\n  }\r\n\r\n  // Hide/Show labels and other info\r\n  toggleHidableInfo(a) {\r\n    var toToggle = document.getElementsByClassName('hidableInfo');\r\n    var spacers = document.getElementsByClassName('spacer');\r\n    \r\n    var newStatus;\r\n    var spacerNewStatus;\r\n    if (this.state.infoVisible) {\r\n      newStatus = \"none\";\r\n      spacerNewStatus = \"inline-block\";\r\n    } else {\r\n      newStatus = \"\";\r\n      spacerNewStatus = \"none\";\r\n    }\r\n    for (var i = 0; i < toToggle.length; i++) {\r\n      toToggle[i].style.display = newStatus;\r\n    }\r\n    for (i = 0; i < spacers.length; i++) {\r\n      spacers[i].style.display = spacerNewStatus;\r\n    }\r\n\r\n    this.setState({infoVisible: !this.state.infoVisible});\r\n  }\r\n\r\n  setInfoModals() {\r\n    var nameFormPair = {\r\n      \"entireBar\": EntireVideoTimelineInfoForm,\r\n      \"zoomedBar\": ZoomedInTimelineInfoForm\r\n    }\r\n    var returnData = CreateInfoModals(nameFormPair);\r\n    this.setState({\r\n      modalList: returnData.modalList, \r\n      infoRefPair: returnData.infoRefPair\r\n    })\r\n  }\r\n  \r\n  showInfoModal(modalName) {\r\n    var ref = this.state.infoRefPair[modalName];\r\n    ref.current.showModal();\r\n  }\r\n\r\n  render() {\r\n    return (\r\n      <div>\r\n        {this.state.modalList}\r\n        <label>Show Labels</label><input style={{marginLeft: \"10px\"}} type=\"checkbox\" defaultChecked={this.state.infoVisible} onChange={this.toggleHidableInfo.bind(this)} />\r\n        <div id=\"videoBarsContainer\"> \r\n          <h2 className=\"barLabels hidableInfo\" style={{textAlign: \"center\"}}>Entire Video Timeline {CreateInfoButton(\"entireBar\", this.showInfoModal.bind(this))}</h2>\r\n          <h3 className=\"barLabels hidableInfo\" style={{textAlign: \"left\", marginLeft: \"10px\", marginBottom: \"5px\"}}>Emotions</h3>\r\n          {this.renderTimelineBar(\"entire\")}\r\n          <div className=\"legendContainer hidableInfo\">\r\n            {this.renderLegend(\"emotion\")}\r\n          </div>\r\n\r\n          <h3 className=\"barLabels hidableInfo\" style={{textAlign: \"left\", marginLeft: \"10px\", marginBottom: \"5px\", marginTop: \"10px\"}}>Tasks</h3>\r\n          <span className=\"spacer\" style={{\"display\": \"none\", margin: \"0px\", height: \"0px\", padding: \"0px\"}}></span>\r\n          {this.renderTimelineBar(\"task\")}\r\n          <div className=\"legendContainer hidableInfo\">\r\n            {this.renderLegend(\"task\")}\r\n          </div>\r\n          \r\n          <br></br>\r\n          <h2 className=\"barLabels hidableInfo\" style={{textAlign: \"center\", marginTop: \"40px\"}}>Zoomed-in Emotions Timeline {CreateInfoButton(\"zoomedBar\", this.showInfoModal.bind(this))}</h2>\r\n          {this.renderTimelineBar(\"zoomed-in\")}\r\n        </div>\r\n      </div>\r\n    )\r\n  }\r\n}\r\n\r\nexport default VideoBars;\r\n","C:\\Users\\New User\\Desktop\\Fourth Year\\Usability_Testing_FYP\\WebApp\\usabcheck\\frontend\\src\\utilities\\utils.js",["168","169","170","171","172","173","174"],"import {NotificationContainer, NotificationManager} from 'react-notifications';\r\n\r\nexport function CreateNotification(type, message) {\r\n  switch (type) {\r\n    case 'info':\r\n      alert = NotificationManager.info(message, 'Info', 3000);\r\n      break;\r\n    case 'success':\r\n      alert = NotificationManager.success(message, 'Success', 3000);\r\n      break;\r\n    case 'warning':\r\n      alert = NotificationManager.warning(message, 'Warning', 3000);\r\n      break;\r\n    case 'error':\r\n      alert = NotificationManager.error(message, 'Error', 5000, () => {\r\n        // console.log(\"Error callback\");\r\n      });\r\n      break;\r\n  }\r\n}\r\n\r\nexport function HandleServerError(error) {\r\n  const resMessage = (\r\n    error.response &&\r\n    error.response.data &&\r\n    error.response.data.message) || \r\n    error.message ||\r\n    error.toString();\r\n  \r\n  // console.log(error.message);\r\n\r\n  CreateNotification(\"error\", error.toString());\r\n}","C:\\Users\\New User\\Desktop\\Fourth Year\\Usability_Testing_FYP\\WebApp\\usabcheck\\frontend\\src\\modal\\infoModalUtilities.js",[],"C:\\Users\\New User\\Desktop\\Fourth Year\\Usability_Testing_FYP\\WebApp\\usabcheck\\frontend\\src\\forms\\infoForms.js",[],{"ruleId":"175","replacedBy":"176"},{"ruleId":"177","replacedBy":"178"},{"ruleId":"179","severity":1,"message":"180","line":3,"column":32,"nodeType":"181","messageId":"182","endLine":3,"endColumn":51},{"ruleId":"183","severity":1,"message":"184","line":84,"column":25,"nodeType":"185","messageId":"186","endLine":84,"endColumn":27},{"ruleId":"183","severity":1,"message":"184","line":110,"column":40,"nodeType":"185","messageId":"186","endLine":110,"endColumn":42},{"ruleId":"183","severity":1,"message":"184","line":113,"column":47,"nodeType":"185","messageId":"186","endLine":113,"endColumn":49},{"ruleId":"183","severity":1,"message":"184","line":161,"column":42,"nodeType":"185","messageId":"186","endLine":161,"endColumn":44},{"ruleId":"179","severity":1,"message":"187","line":1,"column":28,"nodeType":"181","messageId":"182","endLine":1,"endColumn":37},{"ruleId":"183","severity":1,"message":"184","line":141,"column":78,"nodeType":"185","messageId":"186","endLine":141,"endColumn":80},{"ruleId":"183","severity":1,"message":"184","line":157,"column":35,"nodeType":"185","messageId":"186","endLine":157,"endColumn":37},{"ruleId":"183","severity":1,"message":"184","line":258,"column":88,"nodeType":"185","messageId":"186","endLine":258,"endColumn":90},{"ruleId":"188","severity":1,"message":"189","line":8,"column":3,"nodeType":"190","messageId":"191","endLine":11,"endColumn":4},{"ruleId":"183","severity":1,"message":"184","line":183,"column":14,"nodeType":"185","messageId":"186","endLine":183,"endColumn":16},{"ruleId":"183","severity":1,"message":"184","line":210,"column":21,"nodeType":"185","messageId":"186","endLine":210,"endColumn":23},{"ruleId":"192","severity":1,"message":"193","line":213,"column":11,"nodeType":"181","messageId":"194","endLine":213,"endColumn":17},{"ruleId":"192","severity":1,"message":"195","line":217,"column":11,"nodeType":"181","messageId":"194","endLine":217,"endColumn":14},{"ruleId":"183","severity":1,"message":"184","line":163,"column":25,"nodeType":"185","messageId":"186","endLine":163,"endColumn":27},{"ruleId":"183","severity":1,"message":"196","line":164,"column":75,"nodeType":"185","messageId":"186","endLine":164,"endColumn":77},{"ruleId":"183","severity":1,"message":"196","line":215,"column":83,"nodeType":"185","messageId":"186","endLine":215,"endColumn":85},{"ruleId":"197","severity":1,"message":"198","line":305,"column":9,"nodeType":"199","endLine":312,"endColumn":27},{"ruleId":"183","severity":1,"message":"184","line":25,"column":29,"nodeType":"185","messageId":"186","endLine":25,"endColumn":31},{"ruleId":"183","severity":1,"message":"184","line":57,"column":24,"nodeType":"185","messageId":"186","endLine":57,"endColumn":26},{"ruleId":"192","severity":1,"message":"200","line":303,"column":11,"nodeType":"181","messageId":"194","endLine":303,"endColumn":25},{"ruleId":"192","severity":1,"message":"195","line":309,"column":11,"nodeType":"181","messageId":"194","endLine":309,"endColumn":14},{"ruleId":"179","severity":1,"message":"201","line":1,"column":9,"nodeType":"181","messageId":"182","endLine":1,"endColumn":30},{"ruleId":"202","severity":1,"message":"203","line":4,"column":3,"nodeType":"204","messageId":"205","endLine":19,"endColumn":4},{"ruleId":"175","severity":1,"message":"206","line":6,"column":7,"nodeType":"181","messageId":"207","endLine":6,"endColumn":12},{"ruleId":"175","severity":1,"message":"206","line":9,"column":7,"nodeType":"181","messageId":"207","endLine":9,"endColumn":12},{"ruleId":"175","severity":1,"message":"206","line":12,"column":7,"nodeType":"181","messageId":"207","endLine":12,"endColumn":12},{"ruleId":"175","severity":1,"message":"206","line":15,"column":7,"nodeType":"181","messageId":"207","endLine":15,"endColumn":12},{"ruleId":"179","severity":1,"message":"208","line":23,"column":9,"nodeType":"181","messageId":"182","endLine":23,"endColumn":19},"no-native-reassign",["209"],"no-negated-in-lhs",["210"],"no-unused-vars","'NotificationManager' is defined but never used.","Identifier","unusedVar","eqeqeq","Expected '===' and instead saw '=='.","BinaryExpression","unexpected","'createRef' is defined but never used.","no-useless-constructor","Useless constructor.","MethodDefinition","noUselessConstructor","no-redeclare","'series' is already defined.","redeclared","'key' is already defined.","Expected '!==' and instead saw '!='.","jsx-a11y/iframe-has-title","<iframe> elements must have a unique title property.","JSXOpeningElement","'legendDataList' is already defined.","'NotificationContainer' is defined but never used.","default-case","Expected a default case.","SwitchStatement","missingDefaultCase","Read-only global 'alert' should not be modified.","nativeReassign","'resMessage' is assigned a value but never used.","no-global-assign","no-unsafe-negation"]